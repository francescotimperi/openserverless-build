# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build OpenServerless OpenWhisk 2 Standalone native executable

on:
  push:
    tags:
    - '[0-9]*'
    branches-ignore:
    - '*'
jobs:
  build-native:
    name: Build OpenServerless OpenWhisk 2 Standalone native executable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest,windows-latest]
        graalvm_version: ['22.3.3']
    steps:  
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive                  
      - name: Assign TAG from pull request
        if:  ${{ github.event_name == 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git rev-parse --short HEAD)" >> "$GITHUB_ENV"
      - name: Assign TAG from push
        if:  ${{ github.event_name != 'pull_request' }}
        run: |
          echo "IMG_TAG=$(git describe --tags --abbrev=0)" >> "$GITHUB_ENV"
      - name: Set variables for OS-specific GraalVM download
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "GRAALVM_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ matrix.graalvm_version }}/graalvm-ce-java11-linux-amd64-${{ matrix.graalvm_version }}.tar.gz" >> $GITHUB_ENV
            echo "GRAALVM_DIR=graalvm-ce-java11-linux-amd64-${{ matrix.graalvm_version }}" >> $GITHUB_ENV
            echo "GRAALVM_HOME=/opt/graalvm" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "GRAALVM_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ matrix.graalvm_version }}/graalvm-ce-java11-darwin-amd64-${{ matrix.graalvm_version }}.tar.gz" >> $GITHUB_ENV
            echo "GRAALVM_DIR=graalvm-ce-java11-darwin-amd64-${{ matrix.graalvm_version }}" >> $GITHUB_ENV
            echo "GRAALVM_HOME=/opt/graalvm" >> $GITHUB_ENV
          else
            echo "GRAALVM_URL=https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ matrix.graalvm_version }}/graalvm-ce-java11-windows-amd64-${{ matrix.graalvm_version }}.zip" >> $GITHUB_ENV
            echo "GRAALVM_DIR=graalvm-ce-java11-windows-amd64-${{ matrix.graalvm_version }}" >> $GITHUB_ENV
          fi
      - name: Download and install GraalVM 11
        run: |
          echo "Downloading GraalVM from $GRAALVM_URL"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            curl -L -o graalvm.zip "$GRAALVM_URL"
            7z x graalvm.zip -o"$GRAALVM_DIR"
            echo "Setting JAVA_HOME to $PWD/$GRAALVM_DIR"
            echo "JAVA_HOME=$PWD/$GRAALVM_DIR" >> $GITHUB_ENV
            echo "$PWD/$GRAALVM_DIR\\bin" >> $GITHUB_PATH
          else
            mkdir -p $GRAALVM_HOME
            curl -L -o /tmp/graalvm.tar.gz "$GRAALVM_URL"
            tar -xvzf /tmp/graalvm.tar.gz --strip-components=1 -C "$GRAALVM_HOME"
            echo "Setting JAVA_HOME to $GRAALVM_HOME"
            echo "JAVA_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
            echo "$GRAALVM_HOME/bin" >> $GITHUB_PATH
          fi
        shell: bash
      - name: Verify GraalVM installation
        run: |
          java -version
          gu --version

      - name: Install native-image component
        run: |
          gu install native-image                            
      - name: Compile Standalone
        run: ./gradlew :core:standalone:build :core:standalone:copyRuntimeLibs 
        working-directory: openwhisk          
      - name: Define executable name
        id: vars
        run: |
          platform="${RUNNER_OS,,}"
          platform="${platform}-${RUNNER_ARCH,,}"
          name="openserverless-standalone-${platform}-${{ env.IMG_TAG }}"
          case "${{ runner.os }}" in
            Windows) name="${name}.exe" ;;
          esac
          echo "name=$name" >> $GITHUB_OUTPUT        
      - name: Build Native Standalone
        run: |
          mkdir -p ${{ github.workspace }}/standalone/native && \
          native-image \
          --initialize-at-run-time=io.netty \
          --no-fallback --report-unsupported-elements-at-runtime \
          --trace-object-instantiation=ch.qos.logback.classic.Logger \
          --enable-url-protocols=http,https \
          -cp ${{ github.workspace }}/openwhisk/core/standalone/build/classes/scala/main:${{ github.workspace }}/openwhisk/core/standalone/build/resources/main:${{ github.workspace }}/openwhisk/core/standalone/build/dependency-libs/* \
          -H:ConfigurationFileDirectories=${{ github.workspace }}/standalone/graal-config \
          -o ${{ github.workspace }}/standalone/native/${{ steps.vars.outputs.name }} \
          org.apache.openwhisk.standalone.StandaloneOpenWhisk
      - name: Upload native executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.vars.outputs.name }}
          path: standalone/native        